// MESSAGE PSO_DATA PACKING

#define MAVLINK_MSG_ID_PSO_DATA 150

typedef struct __mavlink_pso_data_t
{
 int16_t rpm; /*< Propeller rotation (rpm)*/
 int16_t v_motor; /*< Motor voltage (V)*/
 int16_t i_motor; /*< Motor current (A)*/
 int16_t thrust; /*< Thrust generated by the propulsion system (N)*/
 int16_t accel[3]; /*< Accelerometer readings (raw)*/
} mavlink_pso_data_t;

#define MAVLINK_MSG_ID_PSO_DATA_LEN 14
#define MAVLINK_MSG_ID_150_LEN 14

#define MAVLINK_MSG_ID_PSO_DATA_CRC 5
#define MAVLINK_MSG_ID_150_CRC 5

#define MAVLINK_MSG_PSO_DATA_FIELD_ACCEL_LEN 3

#define MAVLINK_MESSAGE_INFO_PSO_DATA { \
	"PSO_DATA", \
	5, \
	{  { "rpm", NULL, MAVLINK_TYPE_INT16_T, 0, 0, offsetof(mavlink_pso_data_t, rpm) }, \
         { "v_motor", NULL, MAVLINK_TYPE_INT16_T, 0, 2, offsetof(mavlink_pso_data_t, v_motor) }, \
         { "i_motor", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_pso_data_t, i_motor) }, \
         { "thrust", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_pso_data_t, thrust) }, \
         { "accel", NULL, MAVLINK_TYPE_INT16_T, 3, 8, offsetof(mavlink_pso_data_t, accel) }, \
         } \
}


/**
 * @brief Pack a pso_data message
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 *
 * @param rpm Propeller rotation (rpm)
 * @param v_motor Motor voltage (V)
 * @param i_motor Motor current (A)
 * @param thrust Thrust generated by the propulsion system (N)
 * @param accel Accelerometer readings (raw)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_pso_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       int16_t rpm, int16_t v_motor, int16_t i_motor, int16_t thrust, const int16_t *accel)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PSO_DATA_LEN];
	_mav_put_int16_t(buf, 0, rpm);
	_mav_put_int16_t(buf, 2, v_motor);
	_mav_put_int16_t(buf, 4, i_motor);
	_mav_put_int16_t(buf, 6, thrust);
	_mav_put_int16_t_array(buf, 8, accel, 3);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_PSO_DATA_LEN);
#else
	mavlink_pso_data_t packet;
	packet.rpm = rpm;
	packet.v_motor = v_motor;
	packet.i_motor = i_motor;
	packet.thrust = thrust;
	mav_array_memcpy(packet.accel, accel, sizeof(int16_t)*3);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_PSO_DATA_LEN);
#endif

	msg->msgid = MAVLINK_MSG_ID_PSO_DATA;
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_PSO_DATA_LEN, MAVLINK_MSG_ID_PSO_DATA_CRC);
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_PSO_DATA_LEN);
#endif
}

/**
 * @brief Pack a pso_data message on a channel
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param rpm Propeller rotation (rpm)
 * @param v_motor Motor voltage (V)
 * @param i_motor Motor current (A)
 * @param thrust Thrust generated by the propulsion system (N)
 * @param accel Accelerometer readings (raw)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_pso_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
							   mavlink_message_t* msg,
						           int16_t rpm,int16_t v_motor,int16_t i_motor,int16_t thrust,const int16_t *accel)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PSO_DATA_LEN];
	_mav_put_int16_t(buf, 0, rpm);
	_mav_put_int16_t(buf, 2, v_motor);
	_mav_put_int16_t(buf, 4, i_motor);
	_mav_put_int16_t(buf, 6, thrust);
	_mav_put_int16_t_array(buf, 8, accel, 3);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_PSO_DATA_LEN);
#else
	mavlink_pso_data_t packet;
	packet.rpm = rpm;
	packet.v_motor = v_motor;
	packet.i_motor = i_motor;
	packet.thrust = thrust;
	mav_array_memcpy(packet.accel, accel, sizeof(int16_t)*3);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_PSO_DATA_LEN);
#endif

	msg->msgid = MAVLINK_MSG_ID_PSO_DATA;
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_PSO_DATA_LEN, MAVLINK_MSG_ID_PSO_DATA_CRC);
#else
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_PSO_DATA_LEN);
#endif
}

/**
 * @brief Encode a pso_data struct
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param pso_data C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_pso_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_pso_data_t* pso_data)
{
	return mavlink_msg_pso_data_pack(system_id, component_id, msg, pso_data->rpm, pso_data->v_motor, pso_data->i_motor, pso_data->thrust, pso_data->accel);
}

/**
 * @brief Encode a pso_data struct on a channel
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param pso_data C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_pso_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_pso_data_t* pso_data)
{
	return mavlink_msg_pso_data_pack_chan(system_id, component_id, chan, msg, pso_data->rpm, pso_data->v_motor, pso_data->i_motor, pso_data->thrust, pso_data->accel);
}

/**
 * @brief Send a pso_data message
 * @param chan MAVLink channel to send the message
 *
 * @param rpm Propeller rotation (rpm)
 * @param v_motor Motor voltage (V)
 * @param i_motor Motor current (A)
 * @param thrust Thrust generated by the propulsion system (N)
 * @param accel Accelerometer readings (raw)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_pso_data_send(mavlink_channel_t chan, int16_t rpm, int16_t v_motor, int16_t i_motor, int16_t thrust, const int16_t *accel)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PSO_DATA_LEN];
	_mav_put_int16_t(buf, 0, rpm);
	_mav_put_int16_t(buf, 2, v_motor);
	_mav_put_int16_t(buf, 4, i_motor);
	_mav_put_int16_t(buf, 6, thrust);
	_mav_put_int16_t_array(buf, 8, accel, 3);
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PSO_DATA, buf, MAVLINK_MSG_ID_PSO_DATA_LEN, MAVLINK_MSG_ID_PSO_DATA_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PSO_DATA, buf, MAVLINK_MSG_ID_PSO_DATA_LEN);
#endif
#else
	mavlink_pso_data_t packet;
	packet.rpm = rpm;
	packet.v_motor = v_motor;
	packet.i_motor = i_motor;
	packet.thrust = thrust;
	mav_array_memcpy(packet.accel, accel, sizeof(int16_t)*3);
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PSO_DATA, (const char *)&packet, MAVLINK_MSG_ID_PSO_DATA_LEN, MAVLINK_MSG_ID_PSO_DATA_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PSO_DATA, (const char *)&packet, MAVLINK_MSG_ID_PSO_DATA_LEN);
#endif
#endif
}

#if MAVLINK_MSG_ID_PSO_DATA_LEN <= MAVLINK_MAX_PAYLOAD_LEN
/*
  This varient of _send() can be used to save stack space by re-using
  memory from the receive buffer.  The caller provides a
  mavlink_message_t which is the size of a full mavlink message. This
  is usually the receive buffer for the channel, and allows a reply to an
  incoming message with minimum stack space usage.
 */
static inline void mavlink_msg_pso_data_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan,  int16_t rpm, int16_t v_motor, int16_t i_motor, int16_t thrust, const int16_t *accel)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char *buf = (char *)msgbuf;
	_mav_put_int16_t(buf, 0, rpm);
	_mav_put_int16_t(buf, 2, v_motor);
	_mav_put_int16_t(buf, 4, i_motor);
	_mav_put_int16_t(buf, 6, thrust);
	_mav_put_int16_t_array(buf, 8, accel, 3);
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PSO_DATA, buf, MAVLINK_MSG_ID_PSO_DATA_LEN, MAVLINK_MSG_ID_PSO_DATA_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PSO_DATA, buf, MAVLINK_MSG_ID_PSO_DATA_LEN);
#endif
#else
	mavlink_pso_data_t *packet = (mavlink_pso_data_t *)msgbuf;
	packet->rpm = rpm;
	packet->v_motor = v_motor;
	packet->i_motor = i_motor;
	packet->thrust = thrust;
	mav_array_memcpy(packet->accel, accel, sizeof(int16_t)*3);
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PSO_DATA, (const char *)packet, MAVLINK_MSG_ID_PSO_DATA_LEN, MAVLINK_MSG_ID_PSO_DATA_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PSO_DATA, (const char *)packet, MAVLINK_MSG_ID_PSO_DATA_LEN);
#endif
#endif
}
#endif

#endif

// MESSAGE PSO_DATA UNPACKING


/**
 * @brief Get field rpm from pso_data message
 *
 * @return Propeller rotation (rpm)
 */
static inline int16_t mavlink_msg_pso_data_get_rpm(const mavlink_message_t* msg)
{
	return _MAV_RETURN_int16_t(msg,  0);
}

/**
 * @brief Get field v_motor from pso_data message
 *
 * @return Motor voltage (V)
 */
static inline int16_t mavlink_msg_pso_data_get_v_motor(const mavlink_message_t* msg)
{
	return _MAV_RETURN_int16_t(msg,  2);
}

/**
 * @brief Get field i_motor from pso_data message
 *
 * @return Motor current (A)
 */
static inline int16_t mavlink_msg_pso_data_get_i_motor(const mavlink_message_t* msg)
{
	return _MAV_RETURN_int16_t(msg,  4);
}

/**
 * @brief Get field thrust from pso_data message
 *
 * @return Thrust generated by the propulsion system (N)
 */
static inline int16_t mavlink_msg_pso_data_get_thrust(const mavlink_message_t* msg)
{
	return _MAV_RETURN_int16_t(msg,  6);
}

/**
 * @brief Get field accel from pso_data message
 *
 * @return Accelerometer readings (raw)
 */
static inline uint16_t mavlink_msg_pso_data_get_accel(const mavlink_message_t* msg, int16_t *accel)
{
	return _MAV_RETURN_int16_t_array(msg, accel, 3,  8);
}

/**
 * @brief Decode a pso_data message into a struct
 *
 * @param msg The message to decode
 * @param pso_data C-struct to decode the message contents into
 */
static inline void mavlink_msg_pso_data_decode(const mavlink_message_t* msg, mavlink_pso_data_t* pso_data)
{
#if MAVLINK_NEED_BYTE_SWAP
	pso_data->rpm = mavlink_msg_pso_data_get_rpm(msg);
	pso_data->v_motor = mavlink_msg_pso_data_get_v_motor(msg);
	pso_data->i_motor = mavlink_msg_pso_data_get_i_motor(msg);
	pso_data->thrust = mavlink_msg_pso_data_get_thrust(msg);
	mavlink_msg_pso_data_get_accel(msg, pso_data->accel);
#else
	memcpy(pso_data, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PSO_DATA_LEN);
#endif
}
